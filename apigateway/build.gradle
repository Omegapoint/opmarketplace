buildscript {
	ext {
		springBootVersion = "1.3.3.RELEASE"
		reactorVersion = "2.0.7.RELEASE"
		apacheHttpAsyncClientVersion = "4.1.1"
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: "java"
apply plugin: "spring-boot"

jar {
	baseName = "apigateway"
	version = "0.0.1-SNAPSHOT"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}
sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file("src/integration-test/java")
		}
		resources.srcDir file("src/integration-test/resources")
	}

	injectionTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file("src/injection-test/java")
		}
		resources.srcDir file("src/injection-test/resources")
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	injectionTestCompile.extendsFrom testCompile
	injectionTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-actuator"
	//compile "org.springframework.boot:spring-boot-starter-security"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "se.sawano.java:commons:1.3"
	compile "io.projectreactor:reactor-bus:${reactorVersion}"
	compile "io.projectreactor:reactor-core:${reactorVersion}"
	compile "org.apache.httpcomponents:httpasyncclient:${apacheHttpAsyncClientVersion}"
	compile "commons-lang:commons-lang:2.6"

	testCompile "com.jayway.jsonpath:json-path:2.2.0"
	testCompile "org.springframework.boot:spring-boot-starter-test"
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.12"
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

task injectionTest(type: Test) {
	testClassesDir = sourceSets.injectionTest.output.classesDir
	classpath = sourceSets.injectionTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

